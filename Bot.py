from telebot import TeleBot, types
from datetime import datetime, timedelta
import time

bot_token = '6702141092:AAFfXtlkW4U8fPT3VnBJMZToHP4GKjpwc2c'
bot = TeleBot(bot_token)

# ID –∞–¥–º–∏–Ω–æ–≤
admins = [1694921116, 6858042867]

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
active_users = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–ª–æ–±
user_data = {}

# –•–∞–∫–µ—Ä—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã
facts = [
    "–•–∞–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é –µ—â–µ –≤ 80-—Ö –≥–æ–¥–∞—Ö.",
    "–°–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è —Ö–∞–∫–µ—Ä—Å–∫–∞—è –∞—Ç–∞–∫–∞ ‚Äì DDoS-–∞—Ç–∞–∫–∞, –¥–æ—Å—Ç–∏–≥—à–∞—è 2.3 –¢–±/—Å.",
    "–ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ 1983 –≥–æ–¥—É.",
    "–ö–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥, —á–µ–º –Ω–∞—Ä–∫–æ—Ç–æ—Ä–≥–æ–≤–ª—è.",
    "–ß–∞—Å—Ç–æ —Ö–∞–∫–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ–∞–ª—å—à–∏–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–û –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.",
    "–ó–ª–æ–≤—Ä–µ–¥–Ω–æ–µ –ü–û –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø—Ä—è—Ç–∞–Ω–æ –≤ –ª–µ–≥–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.",
    "–•–∞–∫–µ—Ä—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–µ—Ö–Ω–∏–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π.",
    "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –∞—Ç–∞–∫–∏ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.",
    "–û–±—ã—á–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É—è–∑–≤–∏–º—ã–º–∏ –∫ –∞—Ç–∞–∫–∞–º SQL-–∏–Ω—ä–µ–∫—Ü–∏–π.",
    "–í–∑–ª–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤ ‚Äì –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –∫–∏–±–µ—Ä–∞—Ç–∞–∫."
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_subscription_active(user_id):
    if user_id in active_users:
        end_date = active_users[user_id]
        if datetime.now() <= end_date:
            return True
    return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    if is_subscription_active(user_id):
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.")
        show_menu(user_id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    else:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–∂–∏–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
def show_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    email_btn = types.KeyboardButton("üìß Email —Å–Ω–æ—Å")
    support_btn = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    fact_btn = types.KeyboardButton("üß† –•–∞–∫–µ—Ä—Å–∫–∏–π —Ñ–∞–∫—Ç")
    markup.add(email_btn, support_btn, fact_btn)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /activate –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.message_handler(commands=['activate'])
def activate_subscription(message):
    if message.from_user.id in admins:
        try:
            args = message.text.split()[1:]  # –ë–µ—Ä–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            user_id = int(args[0])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            days = int(args[1])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            end_date = datetime.now() + timedelta(days=days)
            active_users[user_id] = end_date
            bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π!\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%Y %H:%M')}.")
            show_menu(user_id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        except (IndexError, ValueError):
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /activate <user_id> <days>")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìß Email —Å–Ω–æ—Å"
@bot.message_handler(regexp="üìß Email —Å–Ω–æ—Å")
def email_snos(message):
    user_id = message.from_user.id
    if is_subscription_active(user_id):
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∂–∞–ª–æ–±—ã:")
        bot.register_next_step_handler(message, get_topic)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º—ã –∂–∞–ª–æ–±—ã
def get_topic(message):
    user_id = message.from_user.id
    user_data[user_id] = {'topic': message.text}
    bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    bot.register_next_step_handler(message, get_complaint_text)

def get_complaint_text(message):
    user_id = message.from_user.id
    user_data[user_id]['text'] = message.text
    bot.send_message(user_id, "–°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
    bot.register_next_step_handler(message, get_request_count)

def get_request_count(message):
    user_id = message.from_user.id
    try:
        count = int(message.text)
        user_data[user_id]['count'] = count
        bot.send_message(user_id, f"–û—Ç–ø—Ä–∞–≤–∫–∞ {count} –∑–∞–ø—Ä–æ—Å–æ–≤...")
        send_complaints(user_id)
    except ValueError:
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

def send_complaints(user_id):
    emails = [
        "abuse@telegram.org",
        "DMCA@telegram.org",
        "support@telegram.org",
        "Ceo@telegram.org",
        "Recover@telegram.org",
        "Spam@telegram.org"
    ]
    
    for i in range(user_data[user_id]['count']):
        time.sleep(4)  # –ê–Ω—Ç–∏—Ñ–ª—É–¥ 4 —Å–µ–∫—É–Ω–¥—ã
        bot.send_message(user_id, f"–ñ–∞–ª–æ–±–∞ #{i+1} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞: {', '.join(emails)}.")
    
    del user_data[user_id]  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

# –•–∞–∫–µ—Ä—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã
@bot.message_handler(regexp="üß† –•–∞–∫–µ—Ä—Å–∫–∏–π —Ñ–∞–∫—Ç")
def send_fact(message):
    user_id = message.from_user.id
    if is_subscription_active(user_id):
        fact = random.choice(facts)
        bot.send_message(user_id, fact)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@bot.message_handler(regexp="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    user_id = message.from_user.id
    if is_subscription_active(user_id):
        bot.send_message(user_id, "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç @AReCToVaN_ZA_NACIONALIZM.")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

bot.polling()
