import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = "6702141092:AAFfXtlkW4U8fPT3VnBJMZToHP4GKjpwc2c"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
button_email = KeyboardButton('üìß Email —Å–Ω–æ—Å')
button_support = KeyboardButton('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(button_email).add(button_support)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def send_complaint(subject, body, num_requests, message):
    for _ in range(num_requests):
        for _ in range(7):  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 7 —Ä–∞–∑
            await message.reply("–ñ–∞–ª–æ–±—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'üìß Email —Å–Ω–æ—Å')
async def email_snos(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∂–∞–ª–æ–±—ã:")

@dp.message_handler(lambda message: message.text not in ['üìß Email —Å–Ω–æ—Å', 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'])
async def process_complaint(message: types.Message):
    user_id = message.from_user.id

    if 'subject' not in user_data[user_id]:
        user_data[user_id]['subject'] = message.text
        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
    elif 'body' not in user_data[user_id]:
        user_data[user_id]['body'] = message.text
        await message.reply("–°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
    elif 'num_requests' not in user_data[user_id]:
        try:
            num_requests = int(message.text)
            user_data[user_id]['num_requests'] = num_requests
            await message.reply(f"–û—Ç–ø—Ä–∞–≤–ª—è—é {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤...")
            await send_complaint(
                user_data[user_id]['subject'],
                user_data[user_id]['body'],
                num_requests,
                message
            )
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.")

@dp.message_handler(lambda message: message.text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def support(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –∞–¥–º–∏–Ω –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
