import telebot
from telebot import types

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = "6702141092:AAFfXtlkW4U8fPT3VnBJMZToHP4GKjpwc2c"
bot = telebot.TeleBot(TOKEN)

# –ö–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_email = types.KeyboardButton('üìß Email —Å–Ω–æ—Å')
button_support = types.KeyboardButton('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
keyboard.add(button_email, button_support)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üìß Email —Å–Ω–æ—Å'
@bot.message_handler(func=lambda message: message.text == 'üìß Email —Å–Ω–æ—Å')
def email_snos(message):
    user_id = message.from_user.id
    user_data[user_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∂–∞–ª–æ–±—ã:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∂–∞–ª–æ–±—ã
@bot.message_handler(func=lambda message: message.text not in ['üìß Email —Å–Ω–æ—Å', 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'])
def process_complaint(message):
    user_id = message.from_user.id

    if 'subject' not in user_data[user_id]:
        user_data[user_id]['subject'] = message.text
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
    elif 'body' not in user_data[user_id]:
        user_data[user_id]['body'] = message.text
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
    elif 'num_requests' not in user_data[user_id]:
        try:
            num_requests = int(message.text)
            user_data[user_id]['num_requests'] = num_requests
            bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª—è—é {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤...")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
            for _ in range(num_requests):
                for _ in range(7):  # –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è 7 —Ä–∞–∑
                    bot.send_message(message.chat.id, "–ñ–∞–ª–æ–±—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'
@bot.message_handler(func=lambda message: message.text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
def support(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
