import telebot
from datetime import datetime, timedelta

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '6423641572:AAFx8dMJaahZBOgm8GRItFhkRlB3_vMa3c0'
bot = telebot.TeleBot(TOKEN)

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMIN_IDS = [1694921116, 6858042867]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscriptions = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    if user_id in subscriptions and subscriptions[user_id] > datetime.now():
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
        btn1 = telebot.types.KeyboardButton('üìß Email —Å–Ω–æ—Å')
        btn2 = telebot.types.KeyboardButton('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
        markup.add(btn1, btn2)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–∂–∏–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /activate –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.message_handler(commands=['activate'])
def activate_subscription(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ /activate <user_id> <days>
        _, user_id, days = message.text.split()
        user_id = int(user_id)
        days = int(days)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        subscriptions[user_id] = datetime.now() + timedelta(days=days)
        bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω.\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscriptions[user_id].strftime('%d.%m.%Y %H:%M')}")
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

    except ValueError:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /activate <user_id> <days>")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text in ['üìß Email —Å–Ω–æ—Å', 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'])
def handle_buttons(message):
    if message.text == 'üìß Email —Å–Ω–æ—Å':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∂–∞–ª–æ–±—ã:")
        bot.register_next_step_handler(message, get_complaint_topic)
    elif message.text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @AReCToVaN_ZA_NACIONALIZM")

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∂–∞–ª–æ–±—ã
def get_complaint_topic(message):
    topic = message.text
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    bot.register_next_step_handler(message, lambda m: get_complaint_text(m, topic))

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã
def get_complaint_text(message, topic):
    complaint_text = message.text
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
    bot.register_next_step_handler(message, lambda m: send_complaints(m, topic, complaint_text))

# –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
def send_complaints(message, topic, complaint_text):
    try:
        num_requests = int(message.text)
        for _ in range(num_requests):
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            bot.send_message(message.chat.id, "–ñ–∞–ª–æ–±—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {num_requests} –∂–∞–ª–æ–± –Ω–∞ —Ç–µ–º—É: {topic}")
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
