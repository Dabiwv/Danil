from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters
from datetime import datetime, timedelta
import logging

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = "6702141092:AAFfXtlkW4U8fPT3VnBJMZToHP4GKjpwc2c"
# –í–∞—à ID
ADMIN_ID = 1694921116

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
subscriptions = {}

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    keyboard = [
        ["üìß Email —Å–Ω–æ—Å"],
        ["üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ]
    reply_markup = context.bot.build_reply_markup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def activate(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /activate <user_id> <days>")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def process_activate(update: Update, context: CallbackContext):
    if update.effective_user.id == ADMIN_ID:
        try:
            user_id = int(context.args[0])
            days = int(context.args[1])
            expiry_date = datetime.now() + timedelta(days=days)
            subscriptions[user_id] = expiry_date
            await context.bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days}d. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expiry_date.strftime('%d.%m.%Y %H:%M')}")
            await update.message.reply_text("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        except (IndexError, ValueError):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate <user_id> <days>")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def email_snos(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in subscriptions and subscriptions[user_id] > datetime.now():
        user_data[user_id] = {}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∂–∞–ª–æ–±—ã:")
    else:
        await update.message.reply_text("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

async def process_complaint(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in user_data:
        if 'subject' not in user_data[user_id]:
            user_data[user_id]['subject'] = update.message.text
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
        elif 'body' not in user_data[user_id]:
            user_data[user_id]['body'] = update.message.text
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
        elif 'num_requests' not in user_data[user_id]:
            try:
                num_requests = int(update.message.text)
                await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤...")
                # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
                for _ in range(num_requests):
                    await update.message.reply_text("–ñ–∞–ª–æ–±—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                user_data.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã.")

async def support(update: Update, context: CallbackContext):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –∞–¥–º–∏–Ω –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ @AReCToVaN_ZA_NACIONALIZM")

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("activate", activate))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^/activate'), process_activate))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^üìß Email —Å–Ω–æ—Å$'), email_snos))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_complaint))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞$'), support))

    application.run_polling()

if __name__ == '__main__':
    main()
